/*    Distribute Layout    =================    Distribute items inside a container.*/@if not variable-exists(layout-namespace) {    @error "Distribute layout requires Base layout.";}.#{$layout-namespace}layout.#{$layout-namespace}distribute {    & > .#{$layout-namespace}layout__inner {        // Override default layout settings:        & > .#{$layout-namespace}box {            flex-grow: 0;            min-width: auto;        }    }}// Bottom-heavy balancing:.#{$layout-namespace}layout.#{$layout-namespace}distribute.#{$layout-namespace}distribute--balance-bottom {    & > .#{$layout-namespace}layout__inner {        & > .#{$layout-namespace}box {            flex-grow: 1;        }    }}// Top-heavy balancing:// ALl browsers that support min/max also support custom properties.// BP1 (BreakPoint1) should be calculated based on the min width of each item in a row up to the// max items per row.// So for example having bp1=60rem works for 2up, (2x30rem) but that BP would make 3up items 20rem// wide which may to too narrow.// UGH 2 should be able to fit side-by-side SOONER than 3. But maybe I can't do the balancing?// For even as few as 3 items there's a choice in how it should be displayed / behave:// Column | 1,2 | 3 OR just Column | 3. (no intermediary)// OR Column | 1,2 (no single row)@supports (width: unquote("max(1px, 1px)")) {    .#{$layout-namespace}layout.#{$layout-namespace}distribute.#{$layout-namespace}distribute--balance-top {        // One spacing unit should be the gutter.        // 2-up = 1 gutter (if flushed) or 3 gutters.        // 3-up = 2 gutters (if flushed) or 4 gutters.        // ...        & > .#{$layout-namespace}layout__inner {            //--sp: #{$distribute-spacing-unit / 2};            --bp1: 90rem;            --bp1-2: 110rem;            --bp2: 130em;            /* 1 or more: */            & > .#{$layout-namespace}box {                flex-basis: 100%;                flex-grow: 1;            }            /* 2 or more: */            & > .#{$layout-namespace}box:nth-last-child(n+2),            & > .#{$layout-namespace}box:nth-last-child(n+2) ~ * {                //flex-basis: unquote("max(50%, (var(--bp1) - 100%) * 999)");                flex-basis: unquote("max(50%, ((var(--b) * 2) - 100%) * 999)");            }            /* 3 or more: - note this should be part of col-to-row*/            /*& > .#{$layout-namespace}box:nth-last-child(n+3),            & > .#{$layout-namespace}box:nth-last-child(n+3) ~ * {                //flex-basis: unquote("max(33%, (var(--bp1) - 100%) * 999)");                flex-basis: unquote("max(33%, ((var(--b) * 3) - 100%) * 999)");            }*/            /* 3 or more: */            & > .#{$layout-namespace}box:nth-last-child(n+3),            & > .#{$layout-namespace}box:nth-last-child(n+3) ~ * {                flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(33%, ((var(--b) * 3) - 100%) * 999))");            }            /* 3 or more, different values for the first one: */            & > .#{$layout-namespace}box:nth-last-child(n+3) {                flex-basis: unquote("max(33%, ((var(--b) * 3) - 100%) * 999)");            }            /* 4 or more: */            & > .#{$layout-namespace}box:nth-last-child(n+4),            & > .#{$layout-namespace}box:nth-last-child(n+4) ~ * {                //flex-basis: unquote("min(max(50%, (var(--bp1) - 100%) * 999), max(25%, (var(--bp2) - 100%) * 999))");                flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(25%, ((var(--b) * 4) - 100%) * 999))");            }            /*            From here on in there are increasingly more possibilities on how things can be laid out.            More items = more possibilities. I've tried to go for what I consider to be the most balanced option but almost all other possibilities are achievable.            */            /* 5 or more: */            & > .#{$layout-namespace}box:nth-last-child(n+5),            & > .#{$layout-namespace}box:nth-last-child(n+5) ~ * {                flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(33%, ((var(--b) * 3) - 100%) * 999), max(25%, ((var(--b) * 4) - 100%) * 999), max(20%, ((var(--b) * 5) - 100%) * 999))");            }            /* 5 or more, different values for the first two: */            & > .#{$layout-namespace}box:nth-last-child(n+5),            & > .#{$layout-namespace}box:nth-last-child(n+5) + * {                flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(20%, ((var(--b) * 5) - 100%) * 999))");            }            /* 5 or more, different values for the first one: */            & > .#{$layout-namespace}box:nth-last-child(n+5) {                flex-basis: unquote("min(max(50%, ((var(--b) * 3) - 100%) * 999), max(100%, ((var(--b) * 4) - 100%) * 999), max(20%, ((var(--b) * 5) - 100%) * 999))");            }            /* 6 or more: */            & > .#{$layout-namespace}box:nth-last-child(n+6),            & > .#{$layout-namespace}box:nth-last-child(n+6) ~ * {                //flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(33%, ((var(--b) * 3) - 100%) * 999), max(25%, ((var(--b) * 4) - 100%) * 999), max(20%, ((var(--b) * 5) - 100%) * 999), max(16%, ((var(--b) * 6) - 100%) * 999))");                flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(33%, ((var(--b) * 3) - 100%) * 999), max(16%, ((var(--b) * 6) - 100%) * 999))");            }            // The idea of the following is to follow what happens on the 'balance-bottom' version            // (inverted), in that when there's room for 4up, the first two are 50%, and when there's            // room for 5, the first 1 is 100%,            // BUT, I can't figure out the math to allow for this, because `min()` will choose the 33%            // basis instead of the 4up 50% basis, because it must calculate as smaller.            // So, I'm having to break the pattern here stick to the these changes:            // 1x6, 2x3, 3x2, 6x1 (unless a solution comes to me)            /* 6 or more, different values for the first two: */            /*& > .#{$layout-namespace}box:nth-last-child(n+6),            & > .#{$layout-namespace}box:nth-last-child(n+6) + * {                flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(33%, ((var(--b) * 3) - 100%) * 999), max(50%, ((var(--b) * 4) - 100%) * 999), max(20%, ((var(--b) * 5) - 100%) * 999), max(16%, ((var(--b) * 6) - 100%) * 999))");            }*/            /* 6 or more, different values for the first one: */            /*& > .#{$layout-namespace}box:nth-last-child(n+6) {                flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(33%, ((var(--b) * 3) - 100%) * 999), max(50%, ((var(--b) * 4) - 100%) * 999), max(100%, ((var(--b) * 5) - 100%) * 999), max(16%, ((var(--b) * 6) - 100%) * 999))");            }*/            /*                It's worth noting here that things get especially tricky and messy. We've already seen                with 6 we've had to skip some steps, and things like 7 and 11 are quite hard too.                Also with ANY amount, the practicalities of allowing all arrangements up to a single                row become limiting.                If you assume you have items that are quite small - and can therefore fit into a single                row - a small reduction in available width that causes wrapping would leave a very large                item on it's own row. This is the whole reason we want to balance things in the first                place, so that this doesn't happen - we want a reduction in available width that causes                wrapping to lead to MORE items being wrapped and thus creating a better balance.                It's just very hard to know where things SHOULD land.            */            /* 7 or more: (1x7 | 1,2x3 | 1,3x2 | 3,4) */            & > .#{$layout-namespace}box:nth-last-child(n+7),            & > .#{$layout-namespace}box:nth-last-child(n+7) ~ * {                flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(33%, ((var(--b) * 3) - 100%) * 999), max(25%, ((var(--b) * 4) - 100%) * 999), max(14%, ((var(--b) * 7) - 100%) * 999))");            }            /* 7 or more, different values for the second and third: */            & > .#{$layout-namespace}box:nth-last-child(n+7) + *,            & > .#{$layout-namespace}box:nth-last-child(n+7) + * + * {                flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(33%, ((var(--b) * 3) - 100%) * 999), max(14%, ((var(--b) * 7) - 100%) * 999))");            }            /* 7 or more, different values for the first one: */            & > .#{$layout-namespace}box:nth-last-child(n+7) {                flex-basis: unquote("min(max(33%, ((var(--b) * 4) - 100%) * 999), max(14%, ((var(--b) * 7) - 100%) * 999))");            }            /* 8 or more: */            & > .#{$layout-namespace}box:nth-last-child(n+8),            & > .#{$layout-namespace}box:nth-last-child(n+8) ~ * {                flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(25%, ((var(--b) * 4) - 100%) * 999), max(12%, ((var(--b) * 8) - 100%) * 999))");            }            /* 9 or more: */            & > .#{$layout-namespace}box:nth-last-child(n+9),            & > .#{$layout-namespace}box:nth-last-child(n+9) ~ * {                flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(33%, ((var(--b) * 3) - 100%) * 999), max(11%, ((var(--b) * 9) - 100%) * 999))");            }            /* 9 or more, different values for the first one: */            & > .#{$layout-namespace}box:nth-last-child(n+9) {                flex-basis: unquote("min(max(33%, ((var(--b) * 3) - 100%) * 999), max(11%, ((var(--b) * 9) - 100%) * 999))");            }            /* 10 or more: */            & > .#{$layout-namespace}box:nth-last-child(n+10),            & > .#{$layout-namespace}box:nth-last-child(n+10) ~ * {                flex-basis: unquote("min(max(50%, ((var(--b) * 2)- 100%) * 999), max(20%, ((var(--b) * 5) - 100%) * 999), max(10%, ((var(--b) * 10) - 100%) * 999))");            }            /* 11 or more: */            & > .#{$layout-namespace}box:nth-last-child(n+11),            & > .#{$layout-namespace}box:nth-last-child(n+11) ~ * {                //flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(20%, ((var(--b) * 5) - 100%) * 999), max(9%, ((var(--b) * 11) - 100%) * 999))");                flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(33%, ((var(--b) * 3) - 100%) * 999), max(9%, ((var(--b) * 11) - 100%) * 999))");            }            /* 11 or more, different values for the second one: */            & > .#{$layout-namespace}box:nth-last-child(n+11) + * {                flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(9%, ((var(--b) * 11) - 100%) * 999))");            }            /* 11 or more, different values for the first one: */            & > .#{$layout-namespace}box:nth-last-child(n+11) {                flex-basis: unquote("min(max(50%, ((var(--b) * 3) - 100%) * 999), max(9%, ((var(--b) * 11) - 100%) * 999))");            }            /* 11 or more, different values for the next 3 ...: */            /*& > .#{$layout-namespace}box:nth-last-child(n+11) ~ :nth-child(5),            & > .#{$layout-namespace}box:nth-last-child(n+11) ~ :nth-child(5) ~ * {                flex-basis: unquote("max(33%, (var(--bp2) - 100%) * 999)");            }            */            /* 11 or more, different values for the last 4 ...: */            /*& > .#{$layout-namespace}box:nth-last-child(n+11) ~ :nth-child(7),            & > .#{$layout-namespace}box:nth-last-child(n+11) ~ :nth-child(7) ~ * {                flex-basis: unquote("max(25%, (var(--bp2) - 100%) * 999)");            }*/            /* 12 or more: double class to boost specificity - ugh.*/            & > .#{$layout-namespace}box:nth-last-child(n+12),            & > .#{$layout-namespace}box:nth-last-child(n+12) ~ * {                flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(33%, ((var(--b) * 3) - 100%) * 999), max(25%, ((var(--b) * 4) - 100%) * 999), max(16%, ((var(--b) * 6) - 100%) * 999), max(8%, ((var(--b) * 12) - 100%) * 999))");            }        }    }}